<div class="page-width-custom">
  <div class="dropbox-sec2">
    <div class="heading-dropbox">
      <div class="half-col">
        <h2 class="text-des-head">{{ block.settings.text }}</h2>
        <p class="text-des">{{ block.settings.text2 }}</p>
      </div>
      <div class="half-col">
        <p id="totalPrice" class="price-tag">0.00</p>
      </div>
    </div>

    <div class="dropbox-sec">   
      <div class="left-col">
        <div class="half-col">
          <select id="category">
            <option value="">Select Category</option>
            {% for collection in block.settings.selected_collections %}
              <option value="{{ collection.handle }}">{{ collection.title }}</option>
            {% endfor %}
          </select>
        </div>

        <div class="half-col">
          <select id="vendor">
            <option value="">Select Type</option>
          </select>
        </div>

        <div class="half-col">
          <select id="thickness">
            <option value="">Select Thickness</option>
          </select>
        </div>

        <div class="half-col">
          <input type="number" id="width" placeholder="Width (50–3500)" />
        </div>

        <div class="half-col">
          <input type="number" id="length" placeholder="Length (50–3500)" />
        </div>
      </div>

      <div class="right-col">
        <div class="half-col">
          <button id="shopNow" disabled style="cursor: not-allowed; opacity: 0.6;">
            Shop Now
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Expose store currency info -->
<script>
  window.ShopCurrency = {
    iso_code: "{{ shop.currency }}",
    symbol: "{{ cart.currency.symbol }}"
  };
</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const categoryDropdown = document.getElementById("category");
  const vendorDropdown = document.getElementById("vendor");
  const thicknessDropdown = document.getElementById("thickness");
  const widthInput = document.getElementById("width");
  const lengthInput = document.getElementById("length");
  const priceDisplay = document.getElementById("totalPrice");
  const shopNowBtn = document.getElementById("shopNow");

  let allProducts = [];
  let matchedProduct = null;
  let basePrice = 0;

function formatCurrency(amount) {
  try {
    const iso = window.ShopCurrency?.iso_code || "INR";
    const formatter = new Intl.NumberFormat(undefined, {
      style: "currency",
      currency: iso,
      currencyDisplay: "symbol"
    });
    return formatter.format(amount); // e.g., ₹123.45 or $123.45
  } catch {
    return "₹" + parseFloat(amount).toFixed(2);
  }
}


  function validateInput(input, min = 50, max = 3500) {
    const val = parseFloat(input.value);
    return !isNaN(val) && val >= min && val <= max;
  }

  function updateTotal() {
    const width = parseFloat(widthInput.value);
    const length = parseFloat(lengthInput.value);

    if (
      validateInput(widthInput) &&
      validateInput(lengthInput) &&
      basePrice > 0
    ) {
      const total = width * length * basePrice;
      priceDisplay.textContent = formatCurrency(total);
      shopNowBtn.disabled = false;
      shopNowBtn.style.cursor = "pointer";
      shopNowBtn.style.opacity = "1";
    } else {
      priceDisplay.textContent = formatCurrency(0);
      shopNowBtn.disabled = true;
      shopNowBtn.style.cursor = "not-allowed";
      shopNowBtn.style.opacity = "0.6";
    }
  }

  function reset() {
    matchedProduct = null;
    basePrice = 0;
    updateTotal();
  }

  categoryDropdown.addEventListener("change", function () {
    const selectedCategory = categoryDropdown.value;
    if (!selectedCategory) return;

    fetch(`/collections/${selectedCategory}/products.json`)
      .then(res => res.json())
      .then(data => {
        allProducts = data.products;
        const vendors = [...new Set(allProducts.map(p => p.vendor))];
        vendorDropdown.innerHTML = `<option value="">Select Type</option>`;
        vendors.forEach(v => {
          vendorDropdown.innerHTML += `<option value="${v}">${v}</option>`;
        });
        thicknessDropdown.innerHTML = `<option value="">Select Thickness</option>`;
        reset();
      });
  });

  vendorDropdown.addEventListener("change", function () {
    const selectedVendor = vendorDropdown.value;
    if (!selectedVendor) return;

    const thicknesses = [...new Set(
      allProducts.filter(p => p.vendor === selectedVendor).map(p => p.product_type)
    )];

    thicknessDropdown.innerHTML = `<option value="">Select Thickness</option>`;
    thicknesses.forEach(t => {
      thicknessDropdown.innerHTML += `<option value="${t}">${t}</option>`;
    });
    reset();
  });

  thicknessDropdown.addEventListener("change", async function () {
    const selectedVendor = vendorDropdown.value;
    const selectedThickness = thicknessDropdown.value;
    if (!selectedVendor || !selectedThickness) return;

    matchedProduct = allProducts.find(
      p => p.vendor === selectedVendor && p.product_type === selectedThickness
    );

    if (matchedProduct) {
      try {
        const html = await fetch(`/products/${matchedProduct.handle}`).then(r => r.text());
        const doc = new DOMParser().parseFromString(html, "text/html");
        const metaEl = doc.querySelector("[data-base-price-per-sqcm]");
        basePrice = parseFloat(metaEl?.dataset.basePricePerSqcm || "0");
        updateTotal();
      } catch (err) {
        console.error("Metafield fetch error:", err);
      }
    }
  });

  widthInput.addEventListener("input", updateTotal);
  lengthInput.addEventListener("input", updateTotal);

  shopNowBtn.addEventListener("click", function () {
    if (!shopNowBtn.disabled && matchedProduct) {
      const width = parseFloat(widthInput.value);
      const length = parseFloat(lengthInput.value);
      window.location.href = `/products/${matchedProduct.handle}?width=${width}&length=${length}`;
    }
  });
});
</script>

<style>
.page-width-custom {
  max-width: 1440px;
}
.dropbox-sec2 {
  padding: 30px;
  background: #5a5a5c;
  border-radius: 5px;
}
.heading-dropbox {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.heading-dropbox h2,
.heading-dropbox p {
  color: white;
}
.price-tag {
  font-size: 30px;
  color: white;
  text-align: right;
}
.dropbox-sec {
  display: grid;
  grid-template-columns: 4fr 1fr;
  gap: 20px;
  margin-top: 20px;
}
.left-col {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}
.right-col {
    display: flex;
    align-items: center;
    justify-content: flex-end;
}
select, input {
  padding: 8px;
  width: 100%;
  max-width: 170px;
}
#shopNow {
  background: white;
  color: black;
  border-radius: 20px;
  padding: 10px 20px;
  font-weight: bold;
  font-size: 16px;
  border: 2px solid white;
}
#shopNow:hover {
  background: black;
  color: white;
}
@media (max-width: 1199px) {
    .page-width {
    padding: 0 2rem;
}
.heading-dropbox .half-col p {
    margin: 0 0 12px;
}
.dropbox-sec select, .dropbox-sec input {
    max-width: 142px;
}
}
@media (max-width: 999px) {
   .dropbox-sec2 {
    padding: 35px 15px;
}
.left-col {
    gap: 5px;
}
.dropbox-sec select, .dropbox-sec input {
    max-width: 100px;
}
#shopNow {
    padding: 8px 16px;
    font-size: 15px;
}
.heading-dropbox h2 {
    margin: 0 0 12px;
}
.dropbox-sec {
    gap: 15px;
    margin-top: 10px;
}
}
@media (max-width: 767px) {
.dropbox-sec {
    grid-template-columns: auto;
}
.dropbox-sec .left-col {
    flex-direction: column;
}
.dropbox-sec .left-col select, .dropbox-sec .left-col input {
    max-width: 100%;
}
.right-col {
    justify-content: center;
}
}
@media (max-width: 575px) {
.heading-dropbox {
    flex-direction: column;
    justify-content: center;
}
.heading-dropbox .half-col p {
    margin: 0 0 10px;
    font-size: 14px;
    line-height: 1.1;
}
.heading-dropbox h2 {
    margin: 0 0 12px;
    text-align: center;
    font-size: 22px;
    line-height: 1.2;
}
.heading-dropbox .half-col p#totalPrice {
    font-size: 24px;
}
}
</style>

{% schema %}
{
  "name": "Custom Collection Filter",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "text",
      "label": "Heading",
      "default": "Products Here"
    },
    {
      "type": "text",
      "id": "text2",
      "label": "Subheading",
      "default": "Choose your category, type, and thickness"
    },
    {
      "type": "collection_list",
      "id": "selected_collections",
      "label": "Collections",
      "limit": 10
    }
  ]
}
{% endschema %}
